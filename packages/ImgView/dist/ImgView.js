!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("ImgView",[],t):"object"==typeof exports?exports.ImgView=t():e.ImgView=t()}(this,(function(){return(()=>{"use strict";var e={n:t=>{var r=t&&t.__esModule?()=>t.default:()=>t;return e.d(r,{a:r}),r},d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{default:()=>f}),require("antd/lib/image/style/css");const r=require("antd/lib/image");var n=e.n(r);const o=require("react");var i=e.n(o);const a=require("prop-types");var u=e.n(a);function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var c={src:u().string,width:u().oneOfType([u().string,u().number]),height:u().oneOfType([u().string,u().number])},s=function(e){var t,r,a=e.src,u=e.width,c=e.height,s=(t=(0,o.useState)(!0),r=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i=[],a=!0,u=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}}(t,r)||function(e,t){if(e){if("string"==typeof e)return l(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?l(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),f=s[0],d=s[1],y=new window.Image;return y.src=a,y.onload=function(){return y.height>y.width?d(!0):d(!1)},i().createElement("div",{className:"imgView",style:{width:u,height:c}},f?i().createElement(n(),{height:"100%",src:a}):i().createElement(n(),{width:"100%",src:a}))};s.propTypes=c,s.defaultProps={src:"",width:"100px",height:"100px"};const f=s;return t})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1nVmlldy5qcyIsIm1hcHBpbmdzIjoiQ0FBQSxTQUEyQ0EsRUFBTUMsR0FDMUIsaUJBQVpDLFNBQTBDLGlCQUFYQyxPQUN4Q0EsT0FBT0QsUUFBVUQsSUFDUSxtQkFBWEcsUUFBeUJBLE9BQU9DLElBQzlDRCxPQUFPLFVBQVcsR0FBSUgsR0FDSSxpQkFBWkMsUUFDZEEsUUFBaUIsUUFBSUQsSUFFckJELEVBQWMsUUFBSUMsSUFScEIsQ0FTR0ssTUFBTSxXQUNULE0sbUJDVEEsSUFBSUMsRUFBc0IsQ0NBMUJBLEVBQXlCSixJQUN4QixJQUFJSyxFQUFTTCxHQUFVQSxFQUFPTSxXQUM3QixJQUFPTixFQUFpQixRQUN4QixJQUFNLEVBRVAsT0FEQUksRUFBb0JHLEVBQUVGLEVBQVEsQ0FBRUcsRUFBR0gsSUFDNUJBLEdDTFJELEVBQXdCLENBQUNMLEVBQVNVLEtBQ2pDLElBQUksSUFBSUMsS0FBT0QsRUFDWEwsRUFBb0JPLEVBQUVGLEVBQVlDLEtBQVNOLEVBQW9CTyxFQUFFWixFQUFTVyxJQUM1RUUsT0FBT0MsZUFBZWQsRUFBU1csRUFBSyxDQUFFSSxZQUFZLEVBQU1DLElBQUtOLEVBQVdDLE1DSjNFTixFQUF3QixDQUFDWSxFQUFLQyxJQUFVTCxPQUFPTSxVQUFVQyxlQUFlQyxLQUFLSixFQUFLQyxHQ0NsRmIsRUFBeUJMLElBQ0gsb0JBQVhzQixRQUEwQkEsT0FBT0MsYUFDMUNWLE9BQU9DLGVBQWVkLEVBQVNzQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RYLE9BQU9DLGVBQWVkLEVBQVMsYUFBYyxDQUFFd0IsT0FBTyxNLG1DQ0xsQkMsUUFBUSw0QkFBN0MsTUNBTSxFQUErQkEsUUFBUSxrQixhQ0E3QyxNQUFNLEVBQStCQSxRQUFRLFMsYUNBN0MsTUFBTSxFQUErQkEsUUFBUSxjLHVIQ0k3QyxJQUFNQyxFQUFZLENBQ2hCQyxJQUFLQyxJQUFBQSxPQUNMQyxNQUFPRCxJQUFBQSxVQUFvQixDQUFDQSxJQUFBQSxPQUFrQkEsSUFBQUEsU0FDOUNFLE9BQVFGLElBQUFBLFVBQW9CLENBQUNBLElBQUFBLE9BQWtCQSxJQUFBQSxVQUUzQ0csRUFBVSxTQUFDLEdBQTJCLEksSUFBekJKLEVBQXlCLEVBQXpCQSxJQUFLRSxFQUFvQixFQUFwQkEsTUFBT0MsRUFBYSxFQUFiQSxPQUM3QixHLEdBQThCRSxFQUFBQSxFQUFBQSxXQUFTLEcsRUFBdkMsRSw4ekJBQU9DLEVBQVAsS0FBZ0JDLEVBQWhCLEtBQ01DLEVBQU0sSUFBSUMsT0FBT0MsTUFHdkIsT0FGQUYsRUFBSVIsSUFBTUEsRUFDVlEsRUFBSUcsT0FBUyxrQkFBT0gsRUFBSUwsT0FBU0ssRUFBSU4sTUFBUUssR0FBVyxHQUFRQSxHQUFXLElBRXpFLHlCQUFLSyxVQUFVLFVBQVVDLE1BQU8sQ0FBRVgsTUFBQUEsRUFBT0MsT0FBQUEsSUFDdENHLEVBQVUsdUJBQU9ILE9BQU8sT0FBT0gsSUFBS0EsSUFBVSx1QkFBT0UsTUFBTSxPQUFPRixJQUFLQSxNQUs5RUksRUFBUUwsVUFBWUEsRUFDcEJLLEVBQVFVLGFBQWUsQ0FDckJkLElBQUssR0FDTEUsTUFBTyxRQUNQQyxPQUFRLFNBRVYsVSIsInNvdXJjZXMiOlsid2VicGFjazovL0ltZ1ZpZXcvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL0ltZ1ZpZXcvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vSW1nVmlldy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9JbWdWaWV3L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9JbWdWaWV3L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vSW1nVmlldy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL0ltZ1ZpZXcvZXh0ZXJuYWwgY29tbW9uanMgXCJhbnRkL2xpYi9pbWFnZS9zdHlsZS9jc3NcIiIsIndlYnBhY2s6Ly9JbWdWaWV3L2V4dGVybmFsIGNvbW1vbmpzIFwiYW50ZC9saWIvaW1hZ2VcIiIsIndlYnBhY2s6Ly9JbWdWaWV3L2V4dGVybmFsIGNvbW1vbmpzIFwicmVhY3RcIiIsIndlYnBhY2s6Ly9JbWdWaWV3L2V4dGVybmFsIGNvbW1vbmpzIFwicHJvcC10eXBlc1wiIiwid2VicGFjazovL0ltZ1ZpZXcvLi9zcmMvSW1nVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIkltZ1ZpZXdcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiSW1nVmlld1wiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJJbWdWaWV3XCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiLy8gVGhlIHJlcXVpcmUgc2NvcGVcbnZhciBfX3dlYnBhY2tfcmVxdWlyZV9fID0ge307XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiYW50ZC9saWIvaW1hZ2Uvc3R5bGUvY3NzXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiYW50ZC9saWIvaW1hZ2VcIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJyZWFjdFwiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcInByb3AtdHlwZXNcIik7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnYW50ZCc7XG5cbmNvbnN0IHByb3BUeXBlcyA9IHtcbiAgc3JjOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB3aWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICBoZWlnaHQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcbn07XG5jb25zdCBJbWdWaWV3ID0gKHsgc3JjLCB3aWR0aCwgaGVpZ2h0IH0pID0+IHtcbiAgY29uc3QgW3N0YXRlSUYsIHNldFN0YXRlSUZdID0gdXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IGltZyA9IG5ldyB3aW5kb3cuSW1hZ2UoKTtcbiAgaW1nLnNyYyA9IHNyYztcbiAgaW1nLm9ubG9hZCA9ICgpID0+IChpbWcuaGVpZ2h0ID4gaW1nLndpZHRoID8gc2V0U3RhdGVJRih0cnVlKSA6IHNldFN0YXRlSUYoZmFsc2UpKTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImltZ1ZpZXdcIiBzdHlsZT17eyB3aWR0aCwgaGVpZ2h0IH19PlxuICAgICAge3N0YXRlSUYgPyA8SW1hZ2UgaGVpZ2h0PVwiMTAwJVwiIHNyYz17c3JjfSAvPiA6IDxJbWFnZSB3aWR0aD1cIjEwMCVcIiBzcmM9e3NyY30gLz59XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5JbWdWaWV3LnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkltZ1ZpZXcuZGVmYXVsdFByb3BzID0ge1xuICBzcmM6ICcnLFxuICB3aWR0aDogJzEwMHB4JyxcbiAgaGVpZ2h0OiAnMTAwcHgnLFxufTtcbmV4cG9ydCBkZWZhdWx0IEltZ1ZpZXc7XG4iXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwidGhpcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwicmVxdWlyZSIsInByb3BUeXBlcyIsInNyYyIsIlByb3BUeXBlcyIsIndpZHRoIiwiaGVpZ2h0IiwiSW1nVmlldyIsInVzZVN0YXRlIiwic3RhdGVJRiIsInNldFN0YXRlSUYiLCJpbWciLCJ3aW5kb3ciLCJJbWFnZSIsIm9ubG9hZCIsImNsYXNzTmFtZSIsInN0eWxlIiwiZGVmYXVsdFByb3BzIl0sInNvdXJjZVJvb3QiOiIifQ==